
pub fn process_uri(uri: &Uri) -> UriConversion {
    let clean_path: String = url_escape::percent_encoding::percent_decode_str(uri.path().as_str())
        .decode_utf8()
        .unwrap_or_else(|e| {
            panic!(
                "Invalid encoding for uri \"{}\" -- {e}",
                uri.path().as_str()
            )
        })
        .to_string();

    let Ok(path) = PathBuf::from_str(&clean_path);
    info!("[Debug] In process_uri path: {}", path.display());
    path.canonicalize()
        .map_or(UriConversion::Unchecked(path), |canonicalized| {
            UriConversion::Canonicalized(canonicalized)
        })
}

                let request_path = match process_uri(&params.text_document.uri) {
                    UriConversion::Canonicalized(p) => p,
                    UriConversion::Unchecked(p) => {
                        p
                    }
                };
                let mut temp_path = request_path.to_str().unwrap_or_default().to_string();
                if temp_path.starts_with("/") && temp_path.chars().nth(2) == Some(':') {
                    if let Some(drive_letter) = temp_path.chars().nth(1) {
                        temp_path = format!("{}:{}", drive_letter, &temp_path[3..]);
                    }
                }
                temp_path = temp_path.replace("/", "\\");
